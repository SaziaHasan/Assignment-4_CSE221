# -*- coding: utf-8 -*-
"""CSE221_Assignment_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oL3E2WUKzcrl52pM9LIZy5-tFCZXhp-4

A. Adjacency Matrix Representation
"""

n, m = input().split()
n, m = int(n), int(m)

adj_mat = []
for i in range(n):
    row = []
    for j in range(n):
        row.append(0)
    adj_mat.append(row)

for _ in range(m):
    u, v, w = input().split()
    u, v, w = int(u), int(v), int(w)
    adj_mat[u-1][v-1] = w

for i in range(n):
    for j in range(n):
        print(adj_mat[i][j], end=' ')
    print()

"""B. Adjacency List Representation"""

n, m = input().split()
n, m = int(n), int(m)

u = list(map(int, input().split()))
v = list(map(int, input().split()))
w = list(map(int, input().split()))

adj_list = []

for i in range(n):
    row = []
    adj_list.append(row)

for i in range(m):
    adj_list[u[i]-1].append((v[i]-1, w[i]))

for i in range (n):
    print(f"{i+1}:", end=" ")
    for j in range(len(adj_list[i])):
        print(f"({adj_list[i][j][0]+1}, {adj_list[i][j][1]})", end=" ")
    print()

"""C. Graph Metamorphosis"""

n = int(input())

list1 = []
adj_mat = []

for i in range (n):
    row = list(map(int, input().split()))
    list1.append(row)

for i in range (n):
    adj_mat.append([0] * n)

for i in range (n):
    k = list1[i][0]
    adjNodes = list1[i][1:]
    for adjNode in adjNodes:
        adj_mat[i][adjNode] = 1

for i in range(n):
    for j in range(n):
        print(adj_mat[i][j], end=' ')
    print()

"""D. The Seven Bridges of Königsberg"""

n, m = input().split()
n, m = int(n), int(m)

adjList = []
for i in range (n+1):
    adjList.append([]*n)

u = list(map(int, input().split()))
v = list(map(int, input().split()))

for i in range (m):
    a = u[i]
    b = v[i]
    adjList[a].append(b)
    adjList[b].append(a)

count = 0
for i in range (1, n+1):
    if len(adjList[i]) % 2 != 0:
        count += 1

if count == 2 or count == 0:
    print("YES")
else:
    print("NO")

"""E. Edge Queries"""

n, m = input().split()
n, m = int(n), int(m)

u = list(map(int, input().split()))
v = list(map(int, input().split()))

indegree = [0] * (n + 1)
outdegree = [0] * (n + 1)

for i in range (m):
    a = u[i]
    b = v[i]
    outdegree[a] += 1
    indegree[b] += 1

result = []
for i in range(1, n + 1):
    result.append(str(indegree[i] - outdegree[i]))

print(' '.join(result))

"""F. The King of Königsberg"""

n = int(input())
x, y = input().split()
x, y = int(x), int(y)

moves = []

for dx in [-1, 0, 1]:
    for dy in [-1, 0, 1]:
        if dx == 0 and dy == 0:
            continue
        a = x + dx
        b = y + dy
        if 1 <= a <= n and 1 <= b <= n:
            moves.append((a, b))

print(len(moves))
for move in moves:
    print(move[0], move[1])

"""G. Coprime Graph"""

n, q = input().split()
n, q = int(n), int(q)

adjNode = []
for _ in range (n + 1):
    adjNode.append([])

for i in range (1, n + 1):
    for j in range(1, n + 1):
        if i != j:
            a, b = i, j
            while b:
                a, b = b, a % b
            if a == 1:
                adjNode[i].append(j)

for i in range (q):
    x, k = input().split()
    x, k = int(x), int(k)
    if k <= len(adjNode[x]):
        print(adjNode[x][k - 1])
    else:
        print("-1")